setcps(144/120/2)


-- d1
-- $ loopAt 8
-- $ splice 64 "0..63"
-- -- $ splice "<16>" (iter 8 "[[0 2] [1 13] [1 2] [13 6] [11 3] 2*2 < 10 10*4>]/2")
-- $ s "1kpd:4"
-- # speed "[1, 1.02]"
--
--


xfadeIn 1 8
$ loopAt 8
$  splice 32 "0..31"
  -- $ splice "<16>" (iter 8 "[[0 2] [1 13] [1 2] [13 6] [11 3] 2*2 < 10 10*4>]/2")
 $ s "1kpd:5" # gain 1.1
 # speed "[-1, -1.02] [1, 1.02]"



xfadeIn 2 8
$ off "2e" (|+ note "{12 -12 7 12}%16")
$ rarely (plyWith "<25 10 15 10 15>" (|* gain 0.9))
$ splice 8 "[<7*2 0*2> 3*2 2 4] [4 .. 7]"
$ fast 4 $ randslice 8
$ note ("<fs5 cs5>(<3 5>,8,<0 2 1>)")
# s "hjdsynth:11"
 # speed "[1, 1.02]"
 # gain 0.88
-- #n (irand 8 + 4)

d3 silence

do
    let mx = [1, 1]
    d3
     -- $ sometimes (modFunc)
     $ someCyclesBy 0.1 ( (#accelerate (slow 4 $ range 6 0 $ sine)).(#speed 0.5))--
     $ almostNever (chunk 4 (hurry 2))
     $ sometimes (iter 4)
     $ struct "[1 0 0 1 0 1 ~ <[0] [1]>]*1"
     $ s "mfx" #legato 1.2 # n (irand 32)
     |* gain (mx!!0*1.2)
    d4 $ s "massi2*4?"
     # legato 1.5 # n (irand 32)
     |* gain (mx!!1*1.1)


d5
  $ loopAt "4!6 8 2"
  -- $ loopAt 4
    $ splice 32 "0..31"
    -- $ fast 16 $ randslice 8 $ degradeBy 0.125
    -- $ splice "<16>" (iter 8 "[[0 2] [1 13] [1 2] [13 6] [11 3] 2*2 < 10*2 10*4>]/2")
    $ s "lbreak160:6"
    # speed "[1, 1.02]"


  d5
     -- $ loopAt "4!6 8 2"
     $ loopAt 4
     -- $ splice 32 "0..31"
        -- $ splice "<16>" (iter 8 "[[0 2] [1 13] [1 2] [13 6] [11 3] 2*2 < 10 10*4>]/2")
     $ fast 16 $ randslice 16 $ degradeBy 0.15
      $ s "lbreak160:6"
      # speed "[1, 1.02]"

d5 silence

d6
  $ superimpose (# s "k")
  $ rarely (off (choose [1/8, 1/16]) (|* gain 0.95))
  $ gain "{1 ~ ~ 1? ~ ~ 1? ~ }%8"
  # sound "sfe-kd:4" # shape 0.5



xfadeIn 1 8
   $ loopAt 4
    -- $ chop 8 $ striate 8
   -- $  splice 32 "0..31"
     $ splice "<16>" (iter 8 "[[0 2] [1 13] [1 2] [13 6] [11 3] 2*2 < 10 10*4>]/2")
    $ s "1kpd:5"
    # speed "[-1, -1.02] [1, 1.02]"
