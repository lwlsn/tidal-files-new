setcps(160/120/2)



pitchShift :: Floating a => a -> a -> a
pitchShift toBpm inBpm = 12 * log (toBpm / inBpm) / log(2)

hope u like algorithms :))))

✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨


xfadeIn 2 8
$ loopAt 1
$ s "<dr amencutup>*16?"
# n (irand 8)
# gain 1.1
# speed "[1, 1.02]"

do
    -- once $ s "svpc" # n (irand 16) # speed "[1, 1.02]"
    d4
        $ rarely (spreadf [ply 2, (#accelerate "-0.2 0.1")])
        $ spread ($) [(slow 1), (iter 4), (slow 1), (slow 1)]
        $ stack [
            s " ~ lsn ~ <lcp lcp*4>" # legato (range 0.5 0.9 $ slow 8 $ sine) #gain 0.8,
            loopAt 4 $ splice 32 "0..31" $ sound "lbreak:2"  #speed "1" #gain 1.05,
            n "[6(3,8,<0 4>)]?" # s "[db, 808bd:5]" |*| gain 1.3 # orbit 0 # krush 3,
            fast " 0.25 0.5 " $ sound "[k(<3 5>,8,<0 1 2 >)]"
            # shape 0.89 # gain 0.9 # speed 0.7
            ]
            |* gain (1.1)

xfadeIn 1 8
    $ ply 2 $ spin 2
    $ loopAt 8
    $ off (0.125/2) (bite 6 " 0 2 3 1")
    $ bite 4 "0 2 1 3"
    $ splice 64 "0..63"
    $ s "edits:0"
    # lpf (12800)
    # lpq 0.11


-- something sludgy ?


do
    resetCycles
    xfadeIn 1 16
        $ loopAt 128 -- 96 to 128
        $ splice 256 "0..255"
        $ s "edits:2"
        # lpf (16800)
        # lpq 0.11
        # speed "[1, 1.02]"
        # gain 0.95






😶‍🌫️😶‍🌫️😶‍🌫️😶‍🌫️😶‍🌫️😶‍🌫️😶‍🌫️😶‍🌫️😶‍🌫️😶‍🌫️😶‍🌫️😶‍🌫️😶‍🌫️😶‍🌫️😶‍🌫️😶‍🌫️😶‍🌫️😶‍🌫️😶‍🌫️😶‍🌫️😶‍🌫️😶‍🌫️😶‍🌫️😶‍🌫️😶‍🌫️😶‍🌫️😶‍🌫️😶‍🌫️😶‍🌫️😶‍🌫️😶‍🌫️😶‍🌫️😶‍🌫️😶‍🌫️😶‍🌫️😶‍🌫️😶‍🌫️😶‍🌫️😶‍🌫️😶‍🌫️😶‍🌫️😶‍🌫️😶‍🌫️😶‍🌫️😶‍🌫️😶‍🌫️😶‍🌫️😶‍🌫️😶‍🌫️😶‍🌫️😶‍🌫️😶‍🌫️


do
    let mx = [1,1,1]
    xfadeIn 1 8 $ loopAt 96
        $ splice 512 "0..511" $ s "svlng:0"
        # gain 1.1
    d2 $ note "<-4*8? <8 1>>"
        # s "sub:1"
        # legato 2  # speed "[1, 1.02]"
        |* gain (mx!!1*0.9) # shape 0.69
    d4
        $ rarely (spreadf [ply 2, (#accelerate "-0.2 0.1")])
        $ whenmod 4 3 (chunk 2 (hurry 2))
        $ stack [
            s " ~ lsn ~ <lcp lcp*4>" #gain 0.82,
            loopAt 8 $ splice 32 "0..31" $ sound "lbreak:2"  #speed "<0.7 0.7  0.7 1.4>" #gain 1.3,
            fast "0.25 1 " $ sound "[k(<3 5>,8,<0 1 2 >)]"
                #shape 0.69 # gain 0.92 # speed 0.7
        ]
        |* gain (mx!!2*0.9)


d4
        $ (ply "<8 16>". (#cut 2 ))
        $ whenmod 4 3 (bite 4 "3 0 3 2" )
        $ spreadf [(#accelerate "-0.2").(ply 2)]
        $ stack [
            s "sfe-cp ~ glitch [~ glitch]" # n (irand 8 )
            # sus 0.5 # rel 0.8
        ]
        -- # gain (mx!!2*0.9)

all $ id

d2
    $ sometimes (ply "<8 16>". (#legato 2 ))
    $ note "<-4*8? [8 10 5 3]*2?>" # s "sub:1"
    # legato 2  # speed "[1, 1.02]"
    # shape 0.69

once $ s "svpc" # n (irand 32+ 16) # speed "[1, 1.02]" # gain 0.8

d3 silence

👅👅👅👅👅👅👅👅👅👅👅👅👅👅👅👅👅👅👅👅👅👅👅👅👅👅👅👅👅👅👅👅👅👅👅👅👅👅👅👅👅👅👅👅👅👅👅👅👅👅

xfadeIn 4 8
    $ off 0.125 (( +| n " <2>").(stut' 6 0.125 (|*| gain 0.8)))
    $  note "<cs5 ds5 f5 f5>(3,8,<0 1>)"  # s "[sub:0, sub:1]" # legato 1

--bit sparse here
xfadeIn 2 8
 -- $ sometimes (ply "<8 16>". (#legato 2 ))
 $ loopAt "8 8 4 4" $ splice 64 "0..63"
 $ s "svlng:9"
 # speed "[1, 1.02]"
 # gain 1.1


do
    let legatoVal = "<2>"
    xfadeIn 1 16
        $ (# begin (choose [0,0.05..0.4]))
        $ spin 2
        $ striate 8 -- add this in
        $ loopAt "<8 8 16 16>"
        $ splice 32 "0..31"
        $ spreadf [(# speed "[1,1.02]").(ply "<2 4 8>")]
        $ s "edits:6"
        # gain 1.025
        # legato (legatoVal)

-- add drop

d3 $ s "[k,cp]*8" # shape 0.79 # speed 0.7 # gain 0.82

do
    let mx = [1,1]
        spinChop = 2
    d3
        $ degradeBy 0.25
        $ spin 4 $ chop 116  -- up to 4/116 ? why not?
        $ stack[
            fast "1" $ s "[cp, k] krane krane:1 krane:4"
            # shape 0.79 # speed 0.7
        ] # gain (mx!!0*0.95)
    d2 $ loopAt "4 4 2 4" $ splice 32 "0..31" $ s " lbreak:0"
        # gain  (mx!!1*0.975)


all $ (# djf (range 0.2 0.8 $ slow 16 $ sine))

do
    let multiplier = 4
    all $ (#hpf (100*multiplier)) .(# coarse (2*multiplier))
    d5 $ silence


-- add spin /chop

all $ id

🐎🐎🐎🐎🐎🐎🐎🐎🐎🐎🐎🐎🐎🐎🐎🐎🐎🐎🐎🐎🐎🐎🐎🐎🐎🐎🐎🐎🐎🐎🐎🐎🐎🐎🐎🐎🐎🐎🐎🐎🐎🐎🐎🐎🐎🐎🐎🐎🐎🐎🐎🐎🐎🐎
d4 silence

xfadeIn 2 8
$ loopAt "<32>"
$ splice 64 "0..63" -- down to 45
$ s "foans"
# speed "[1, 1.02, 0.98]"
# gain 1.5

do
    d1
    -- $ whenmod 24 22 (const $ s "k*16" # speed "[1, 1.02]" # shape 0.69 # gain 0.8)
    $ sometimesBy 0.1 ( (#accelerate (slow 4 $ range 6 0 $ sine)).(#speed 0.5))
    $ rarely (ply "2 4 8 12")
    $ stack [
        slow 8 $ s "svpc" #n (choose [2,3,6]) # legato 2,
        fast 4 $ s "lcp*2" #legato 1  # up (range 24 36$ slow 4 $ sine) # gain 0.8 ,
        sometimes (fast 2) $ s "k*2" # speed "[1, 1.02]",
        loopAt 8 $ splice 32 "0..31" $ s "svlng:3"
        ]

d3
    $ s " ~ glitch"
    # speed (range 0.5 2 $ slow 8 $ sine)
    # n (irand 8)

do
    d1
    $ sometimesBy 0.1 ( (#accelerate (slow 4 $ range 6 0 $ sine)).(#speed 0.5))
    $ rarely (ply "2 4 8 12")
    $ every 8 (chunk 2 (hurry 2))
    $ stack [
        loopAt 8 $ splice 32 "0..31" $ s "svlng:3"
        ]
    # gain 1.1


🛠🛠🛠🛠🛠🛠🛠🛠🛠🛠🛠🛠🛠🛠🛠🛠🛠🛠🛠🛠🛠🛠🛠🛠🛠🛠🛠🛠🛠🛠🛠🛠🛠🛠🛠🛠🛠🛠🛠🛠🛠🛠🛠🛠🛠🛠🛠🛠🛠🛠🛠


d4 $ s "~ ~ ~ < alphabet:9>*8?"
# speed "[1, 1.02]"
# up (range 6 8 $ fast 8 $ sine)

d1 silence



do
    resetCycles -- add/takeaway  !
    xfadeIn 2 8
        $ loopAt 88 -- up to 64
        $ splice 512 "0..511" $ s "edits:4"
        # speed "[1,1.02]" # gain 1.1 # shape 0.69

do
    let kickPat = "{1 1 ~ 1 1 1 ~ 1 1}%8"
    d0 $ stack [
            sometimes (fast 2 ) $ struct (kickPat) $ s "k",
            struct (inv ($) kickPat) $ s "bassPat"
    ]

d1
$ fast 4
$ stack
[
    fast 4 $ s "lcp*2" #legato 1 # sus 0.4 # rel 0.4
    # up (range 24 36$ slow 4 $ sine) # gain 0.7
    ]

d3 silence

all $ (chop 42).(#djf 0.7)

do
    once $ s "svpc" # n (irand 8) # gain 1.1
    all $ id


d4
$ s "~ ~ ~ numbers*8?" # n (irand 8)
# speed "[1.5, 1.52, 1.48]"
# up (range 0 8 $ fast 8 $ sine)



🦝🦝🦝🦝🦝🦝🦝🦝🦝🦝🦝🦝🦝🦝🦝🦝🦝🦝🦝🦝🦝🦝🦝🦝🦝🦝🦝🦝🦝🦝🦝🦝🦝🦝🦝🦝🦝🦝🦝🦝🦝🦝🦝🦝🦝🦝🦝🦝🦝🦝🦝

xfadeIn 2 8
$ loopAt "8"
$ splice 64 "0..63"
$ s "edits:7"
 |* gain "1.1"


d4 $ s "~ ~ ~ numbers*8?" # n (irand 8)
# speed "[0.5, 0.52]"
# gain 0.98


 do
    let legatoVal = 2.2
        mix = [1,1]
    d1
        $ spreadf [ply 2 , (# accelerate "-0.2 0.2")]
        $ often (#crush "2 4")
        $ stack [
            gain "{1*2 ~ ~ ~ ~ ~ 1}%4" # s "k"  # shape 0.59 # gain 0.87,
            s "~ sn:2 ~ <lcp lcp*2>"   # shape 0.92 # gain 0.7
        ] # legato (legatoVal-0.5)
        |* gain (mix!!0*1.05)
    d3
        $ often (#accelerate "0.2")
        $ note "<as4 >(3,8)"
            # s "[sub:0, sub:2]" # legato 2  #speed "[1, 1.02]"
         |* gain (mix!!1*0.9)

all $ (#djf "0.3")

all $ (# accelerate "-2")

all $ id

🎃🎃🎃🎃🎃🎃🎃🎃🎃🎃🎃🎃🎃🎃🎃🎃🎃🎃🎃🎃🎃🎃🎃🎃🎃🎃🎃🎃🎃🎃🎃🎃🎃🎃🎃🎃🎃🎃🎃🎃🎃🎃🎃🎃🎃🎃🎃🎃
spooky breakdownn...

d4
$ spin 2
$ splice 4 "0 2 2*8 2 3 ~ 2"
$ sound "numbers" # n (irand 32)
# speed "[1, 1.02]"
# gain 1.05

d1 silence

xfadeIn 2 8
$ jux rev
$ degradeBy 0.25
$ off 0.25 ( +| note "<-7 5 12>")
$ off 0.125 (+| note "12")
$ note "<c4(3,8) c5(3,16) d4(5,16) e5(5,16,2)>"
# s "synths:7"
# legato "<0.4>" # gain 1.2


d3
$ degradeBy 0.1
$ every 4 (chunk 2 (hurry 2))
$ chop 32
$ stack [
    gain "1 ~ 1 1 1 [~ 1] 1 1 " # s "k*2",
    ply 4 $ s "~ <cp cp*4>"
    ]
# shape 0.79 # gain "0.89"
# pan 0.68


d1
$ s "~ glitch dr amencutup"
# n (irand 32)

d4 silence

do
    let mx = [1, 1]
        kickPat = "{1 1 ~ 1 [~ 1] 1  ~ 1  }%8"
    d1
        $ whenmod 24 20 (const $ silence)
        $ sometimes (slow 2)
        $ whenmod 7 4 (chop 4)
        -- $ chop 2 $ spin 2
        $ rarely (chunk 2 (hurry 2))
        $ stack [
            gain (kickPat) # s "k*2" # shape 0.25 ,
            loopAt "2" $ splice 32 "0..31" $ s "lbreak:3",
            slow 8 $ s "svpc" # n (irand 16)
        ]
         # gain (mx!!0)
    d3
        $ chunk 2 (hurry 2)
        $ s "sub(3,8)"
        # n (irand 8)
        #legato "1.5"
        # gain (mx!!1)


d1 silence

do
    resetCycles
    xfadeIn 2 8
        $ loopAt 96 -- down to 128
        $ splice 512 "0..511" $ s "edits:8"
        # speed "[1,1.02]" # gain 1.1 # shape 0.69


d3
    $ chunk 2 (hurry 2)
    $ s "sub(3,8)"
    # n (irand 8)
    # legato "1.5"
    # gain (0)


d1 silence


d4
$ silence

all $ (#accelerate "-0.2")


all $ id


do
    once $ s "svpc" # n (irand 8) # gain 1.1
    all $ id


do
    let mx = [1,0,1]
    d1
        $ rarely ((ply 8).(# cut 2) )
        $ whenmod 4 3 (bite 4 "3 0 2 4")
        $ s "svpc:19 ~ ~ [~ sd]" # n (irand 8+16)
        |* gain (mx!!0*0.8)

do
    -- resetCycles
    xfadeIn 2 8
        $ loopAt 16 -- down to 128
        $ splice 32 "0..31" $ s "edits:9"
        # speed "[1,1.02]" # gain 1.1 # shape 0.69

all $ (#djf 0.1)

setcps(160/120/2)

hush
